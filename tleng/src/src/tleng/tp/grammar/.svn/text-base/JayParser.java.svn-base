/* Generated By:JavaCC: Do not edit this line. JayParser.java */
package tleng.tp.grammar;


public class JayParser implements JayParserConstants {
        /*
	static void main( String[] args ) throws ParseException, TokenMgrError {
		JayParser parser = new JayParser( System.in ) ;
		parser.Start() ; 
	}
	*/

        public static String html_final = "</body>\n</html>";
        public static String codigo_inicial = " \t<div class = \"CodeBlock\"> \n";
        public static String codigo_final = " \t</div> \n";

        public static String html = "";

        public static String nueva_linea = "\t<br/> \n";

static String getSpanOper(Token token){
        String str = token.image;
    return " \t<span class = \"Op\">" + str + "</span> \n";
}

static String getSpanKey(Token token){
        String str = token.image;
    return " \t<span class = \"Key\">" + str + "</span> \n";
}

static String getSpanLit(Token token){
        String str = token.image;
    return " \t<span class = \"Lit\">" + str + "</span> \n";
}

static String getSpanSep(Token token){
        String str = token.image;
    String result = " \t<span class = \"Sep\">" + str + "</span> \n";
    if ("{".equals(str)){
        return result + codigo_inicial + "\n";
        } else if ("}".equals(str)){
                return codigo_final + "\n" + result;
        } else if (";".equals(str)){
                return result + nueva_linea;
        } else {
                return result;
        }
}

static String getSpanId(Token token){
        String str = token.image;
    return " \t<span class = \"Id\">" + str + "</span> \n";
}

/******************************************************************************
 * PRODUCTIONS                                                                *
 ******************************************************************************/
  final public String Program() throws ParseException {
        Token token;
        html += "<html> \n <head> \n <link href=\"jay.css\" rel=\"stylesheet\" type=\"text/css\"> \n </head> \n <body> \n";
    token = jj_consume_token(KWVOID);
                             html += getSpanKey(token);
    token = jj_consume_token(KWMAIN);
                             html += getSpanKey(token);
    token = jj_consume_token(PAR_A);
                             html += getSpanSep(token);
    token = jj_consume_token(PAR_C);
                             html += getSpanSep(token);
    token = jj_consume_token(LL_A);
                             html += getSpanSep(token);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KWBOOLEAN:
      case KWINT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Declaration();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KWIF:
      case KWWHILE:
      case LL_A:
      case PTOCOMA:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      Statement();
    }
    token = jj_consume_token(LL_C);
                             html += getSpanSep(token);
    jj_consume_token(0);
                html += html_final; System.out.println(html); {if (true) return html;}
    throw new Error("Missing return statement in function");
  }

  final public void Declaration() throws ParseException {
    Type();
    Identifiers();
    token = jj_consume_token(PTOCOMA);
                           html += getSpanSep(token);
  }

  final public void Type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KWINT:
      token = jj_consume_token(KWINT);
                          html += getSpanKey(token);
      break;
    case KWBOOLEAN:
      token = jj_consume_token(KWBOOLEAN);
                             html += getSpanKey(token);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Identifiers() throws ParseException {
    token = jj_consume_token(IDENTIFIER);
                              html += getSpanId(token);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      token = jj_consume_token(COMA);
                                  html += getSpanSep(token);
      token = jj_consume_token(IDENTIFIER);
                                      html += getSpanId(token);
    }
  }

  final public void Statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PTOCOMA:
      token = jj_consume_token(PTOCOMA);
                           html += getSpanSep(token);
      break;
    case LL_A:
      Block();
      break;
    case IDENTIFIER:
      Assignment();
      break;
    case KWIF:
      IfStatement();
      break;
    case KWWHILE:
      WhileStatement();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Block() throws ParseException {
    token = jj_consume_token(LL_A);
                         html += getSpanSep(token);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KWIF:
      case KWWHILE:
      case LL_A:
      case PTOCOMA:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      Statement();
    }
    token = jj_consume_token(LL_C);
                         html += getSpanSep(token);
  }

  final public void Assignment() throws ParseException {
    token = jj_consume_token(IDENTIFIER);
                                 html += getSpanId(token);
    token = jj_consume_token(OASSIGN);
                                         html += getSpanOper(token);
    Expression();
    token = jj_consume_token(PTOCOMA);
                                         html += getSpanSep(token);
  }

  final public void IfStatement() throws ParseException {
    token = jj_consume_token(KWIF);
                                         html += getSpanKey(token);
    token = jj_consume_token(PAR_A);
                                         html += getSpanSep(token);
    Expression();
    token = jj_consume_token(PAR_C);
                                         html += getSpanSep(token);
    Statement();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case KWELSE:
      token = jj_consume_token(KWELSE);
                                         html += getSpanKey(token);
      Statement();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void WhileStatement() throws ParseException {
    token = jj_consume_token(KWWHILE);
                                         html += getSpanKey(token);
    token = jj_consume_token(PAR_A);
                                         html += getSpanSep(token);
    Expression();
    token = jj_consume_token(PAR_C);
                                         html += getSpanSep(token);
    Statement();
  }

  final public void Expression() throws ParseException {
    Conjunction();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OOR:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      token = jj_consume_token(OOR);
                                         html += getSpanOper(token);
      Conjunction();
    }
  }

  final public void Conjunction() throws ParseException {
    Relation();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OAND:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      token = jj_consume_token(OAND);
                                         html += getSpanOper(token);
      Relation();
    }
  }

  final public void Relation() throws ParseException {
    Addition();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OASSIGN:
      case OMENOR:
      case OMAYOR:
      case OADMIRACION:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_7;
      }
      Comparison();
      Addition();
    }
  }

  final public void Comparison() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OMENOR:
      token = jj_consume_token(OMENOR);
                                         html += getSpanOper(token);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OASSIGN:
        token = jj_consume_token(OASSIGN);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
                                html += getSpanOper(token);
      break;
    case OMAYOR:
      token = jj_consume_token(OMAYOR);
                                         html += getSpanOper(token);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OASSIGN:
        token = jj_consume_token(OASSIGN);
        break;
      default:
        jj_la1[11] = jj_gen;
        ;
      }
                              html += getSpanOper(token);
      break;
    case OASSIGN:
      token = jj_consume_token(OASSIGN);
                                         html += getSpanOper(token);
      token = jj_consume_token(OASSIGN);
                             html += getSpanOper(token);
      break;
    case OADMIRACION:
      token = jj_consume_token(OADMIRACION);
                                 html += getSpanOper(token);
      token = jj_consume_token(OASSIGN);
                                         html += getSpanOper(token);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Addition() throws ParseException {
    Term();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPLUS:
      case OMINUS:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_8;
      }
      Sums();
      Term();
    }
  }

  final public void Sums() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPLUS:
      token = jj_consume_token(OPLUS);
                         html += getSpanOper(token);
      break;
    case OMINUS:
      token = jj_consume_token(OMINUS);
                                 html += getSpanOper(token);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Term() throws ParseException {
    Negation();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OSTAR:
      case OSLASH:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_9;
      }
      Mult();
      Negation();
    }
  }

  final public void Mult() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OSTAR:
      token = jj_consume_token(OSTAR);
                           html += getSpanOper(token);
      break;
    case OSLASH:
      token = jj_consume_token(OSLASH);
                                         html += getSpanOper(token);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Negation() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OADMIRACION:
      token = jj_consume_token(OADMIRACION);
                                      html += getSpanOper(token);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    Factor();
  }

  final public void Factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      token = jj_consume_token(IDENTIFIER);
                              html += getSpanId(token);
      break;
    case LITERAL:
      token = jj_consume_token(LITERAL);
                           html += getSpanLit(token);
      break;
    case PAR_A:
      token = jj_consume_token(PAR_A);
                                         html += getSpanSep(token);
      Expression();
      token = jj_consume_token(PAR_C);
                                         html += getSpanSep(token);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public JayParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x240,0x511100,0x240,0x200000,0x511100,0x511100,0x80,0x0,0x0,0xc2000000,0x2000000,0x2000000,0xc2000000,0xc000000,0xc000000,0x30000000,0x30000000,0x0,0x442000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x2,0x1,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,};
   }

  public JayParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public JayParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JayParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public JayParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JayParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public JayParser(JayParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  public void ReInit(JayParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[35];
    for (int i = 0; i < 35; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
